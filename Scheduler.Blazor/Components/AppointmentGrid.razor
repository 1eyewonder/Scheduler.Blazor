@typeparam T
@using Scheduler.Blazor.Helpers
@inherits MudComponentBase

<MudContainer Style="@($"{Style} {_myStyle}")"
              Class="@($"{Class} px-1")"
              Tag="@Tag"
              UserAttributes="@UserAttributes">
    @{
        var i = 0;

        // Create grid for appointments
        foreach (var time in _timeCoverage)
        {
            var timeStyle = "grid-column: 1 / 2; " +
                            $"grid-row: {i + 1} / span 1;";

            var spaceStyle = "grid-column: 1 / 2; " +
                            $"grid-row: {i + 1} / span 1;";

            if (i == 0)
            {
                <MudText Style="grid-column: 1/2; grid-row: 1/span 1;">
                    @time.ToString("t")
                </MudText>
            }
            else if (i % (60 / AppointmentSpan.Minutes) == 0)
            {
                <MudText Style="@timeStyle">
                    @time.ToString("t")
                </MudText>
            }
            else
            {
                <span style="@spaceStyle"></span>
            }

            i++;
        }

        // Create appointment components
        //var appointmentsInCoverage = Appointments.Where(x => (x.Start, x.End)
        //    .Overlaps((_timeCoverage.First(), _timeCoverage.Last())));

        var appointmentsInCoverage = Appointments.Where(x => x.End > _timeCoverage.First() &&
                                                             x.Start < _timeCoverage.Last());

        foreach (var appointment in appointmentsInCoverage)
        {
            int firstRow;
            int lastRow;

            // Overlaps
            if (!appointment.Start.Between(_timeCoverage.First(), _timeCoverage.Last()) &&
             appointment.End.Between(_timeCoverage.First(), _timeCoverage.Last()))
            {
                firstRow = appointment.Start.Minute / AppointmentSpan.Minutes + 1;
            }

            // Normal
            else
            {
                firstRow = 60 / AppointmentSpan.Minutes * (appointment.Start.Hour - _timeCoverage.First().Hour) + (appointment.Start.Minute - _timeCoverage.First().Minute)/ AppointmentSpan.Minutes + 1;
            }

            // Overlaps
            if (appointment.End > _timeCoverage.Last())
            {
                lastRow = 60 / AppointmentSpan.Minutes * (_timeCoverage.Last().Hour - _timeCoverage.First().Hour) + (appointment.End.Minute - _timeCoverage.First().Minute) / AppointmentSpan.Minutes + 1;
            }

            // Normal
            else
            {
                lastRow = 60 / AppointmentSpan.Minutes * (appointment.End.Hour - _timeCoverage.First().Hour) + (appointment.End.Minute - _timeCoverage.First().Minute) / AppointmentSpan.Minutes + 1;
            }

            var appointmentStyle = "grid-column: 2; " +
                   $"grid-row: {firstRow} / {lastRow};";

            <AppointmentSlot T="T"
                             Appointment="@appointment"
                             Style="@appointmentStyle"
                             OnClick="@OnAppointmentClick"
                             Class="rounded-0 d-flex">
                @appointment.Title
            </AppointmentSlot>
        }
    }
</MudContainer>