@using Scheduler.Blazor.Dialogs
@using Scheduler.Blazor.Enums
@using Scheduler.Blazor.Helpers
@typeparam T

@inject IDialogService _dialogService

<MudContainer Fixed="true">
    <MudToolBar Class="my-3">
        <MudButtonGroup Variant="@Variant">
            <MudButton OnClick="SubtractMonthFromDate">Previous</MudButton>
            <MudButton OnClick="AddMonthToDate">Next</MudButton>
            <MudButton OnClick="SelectToday">
                Today
            </MudButton>
        </MudButtonGroup>

        <MudSpacer/>

        <MudButton OnClick="SelectedMonthDialog">
            <MudText Typo="Typo.h4">
                @($"{MonthName} - {SelectedDate.Year}")
            </MudText>
        </MudButton>
    
        <MudSpacer/>
    
        <MudButtonGroup Variant="@Variant">
            <MudButton OnClick="@(() => WeekType = EWeekType.FullWeek)">Full Week</MudButton>
            <MudButton OnClick="@(() => WeekType = EWeekType.WorkWeek)">Work Week</MudButton>
        </MudButtonGroup>
    
    </MudToolBar>

    @for (var i = 0; i < WeeksInMonth; i++)
    {
        <SchedulerWeek T="T"
                       WeekType="@WeekType"
                       FirstSundayOfWeek="@(StartOfMonth .AddDays(7 * i) .GetPrevious(DayOfWeek.Sunday))"
                       AppointmentVariant="@AppointmentVariant"
                       Appointments="@(Appointments .Where(x => (x.Start, x.End) .Overlaps((StartOfMonth.AddDays(7 * i).GetPrevious(DayOfWeek.Sunday), 
                                         StartOfMonth.AddDays(7 * i).GetNext(DayOfWeek.Saturday)))) .ToList())">
        </SchedulerWeek>
    }
</MudContainer>

@code {
    private async Task SelectedMonthDialog()
    {
        var parameters = new DialogParameters
        {
            { "SelectedDate", SelectedDate }
        };

        var dialog = _dialogService.Show<SelectMonthDialog>("Select Month", parameters, new DialogOptions
        {
            NoHeader = true,
            FullWidth = true,
            CloseButton = false
        });

        var result = await dialog.Result;
        if (result is not null)
        {
            SelectedDate = (DateTime)result.Data;
        }
    }

    private void SelectToday()
    {
        SelectedDate = DateTime.Now;
    }

    private async Task AddMonthToDate()
    {
        var newDate = new DateTime(SelectedDate.Ticks).AddMonths(1);
        SelectedDate = newDate;
        await SelectedDateChanged.InvokeAsync(newDate);
        StateHasChanged();
    }

    private async Task SubtractMonthFromDate()
    {
        var newDate = new DateTime(SelectedDate.Ticks).AddMonths(-1);
        SelectedDate = newDate;
        await SelectedDateChanged.InvokeAsync(newDate);
        StateHasChanged();
    }
}
